import pandas as pd # Импортируем библиотеку Pandas.

"""Для чего нужна библиотека Pandas
Аналитика данных: продуктовая, маркетинговая и другая. Работа с любыми данными требует анализа и подготовки:
необходимо удалить или заполнить пропуски, отфильтровать, отсортировать или каким-то образом изменить данные.
Pandas в Python позволяет быстро выполнить все эти действия, а в большинстве случаев ещё и автоматизировать их.
    Data science и работа с большими данными. Pandas помогает подготовить и провести первичный анализ данных, чтобы
 потом использовать их в машинном или глубоком обучении.
    Статистика. Библиотека поддерживает основные статистические методы, которые необходимы для работы с данными.
 Например, расчёт средних значений, их распределение по квантилям и другие.
     DataFrame — основной тип данных в Pandas, вокруг которого строится вся работа. Его можно представить в виде обычной
таблицы с любым количеством столбцов и строк. Внутри ячеек такой «таблицы» могут быть данные самого разного типа:
числовые, булевы, строковые и так далее.
    У DataFrame есть и индексы строк, и индексы столбцов. Это позволяет удобно сортировать и фильтровать данные,
а также быстро находить нужные ячейки.
Создадим простой DataFrame с помощью словаря и посмотрим на его отображение:"""

city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]} # Создаём словарь с нужной информацией о городах.
df = pd.DataFrame(city) # Превращаем словарь в DataFrame, используя стандартный метод библиотеки.
df.head()
print(df) # Выводим DataFrame на экран.
print(df.dtypes)  # Выводим тип каждой колонки.

city1 = {'Город': ['Барнаул', 'Бийск', 'Рубцовск', 'Змеиногорск'],
        'Год основания': [1730, 1709, 1892, 1744],
        'Население': [0.62, 0.18, 0.12, 0.09]}
df1 = pd.DataFrame(city1)
df2 = pd.concat([df,df1], ignore_index=True) # Добавляем элементы.
print(df2)
df1 = df2.sort_values('Год основания')  # Сортируем по году основания.
print(df1)
df3 = df2.drop([5,7])  # Удаляем строки.
print(df3)

"""
NumPy — это открытая бесплатная Python-библиотека для работы с многомерными массивами, этакий питонячий аналог Matlab.
NumPy чаще всего используют в анализе данных и обучении нейронных сетей — в каждой из этих областей нужно проводить
много вычислений с такими матрицами.
"""
import numpy as np
#Целочисленный 3 мерный массив
a = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], dtype='int32')
print(a)
print(a.ndim) #кол-во измер.
print(a.shape)  #два массива с двумя строками и тремя столбцами.
print(f'1 массив, 2 строка, 3 столбeц:   {a[0, 1, 2]}')  #1 массив, 2 строка, 3 столбeц.
print("1 массив:")
print(a[0, :])
print(f' 1 массив, 1 строка: {a[0, 0, :]}, в каждом массиве 2 строка 2 столбец: {a[:, 1, 1]}')
print('в каждом массиве, в каждой строке ко 2 столбцу + 2')
print(a[:,:,1])
print('0 массив')
b = np.zeros((2, 2)) # 0 массив
print(b)
print('Единичная матрица')
b = np.identity(4)
print(b)
print('операции с массивами одинакового размера:')
b1 = np.array([[1, 2], [3, 4]])
b2 = np.array([[2, 2], [2, 2]])
print(b1+b2)
print(b1*b2)
print('перемножим матрицы по правилам линейной алгебры: nxm * mxn')
b1 = np.array([[1, 2, 3], [3, 4, 5]])
b2 = np.array([[2, 1], [3, 2], [4, 5]])
print(np.matmul(b1,b2))

"""
Matplotlib — популярная Python-библиотека для визуализации данных. Она используется для создания любых видов графиков: 
линейных, круговых диаграмм, построчных гистограмм и других — в зависимости от задач. 
"""
import matplotlib.pyplot as plt

x = [i for i in range(1,11)] #Для начала создадим две переменные — x и y ОДИНАКОВОЙ ДЛИНЫ
y = [1, 5, 46, 32, 65, 45, 21, 12, 10, 36]
plt.plot(x, y, color='green', marker='o', markersize=7) #Теперь построим график, который соединит эти точки:
plt.xlabel('Ось х') #Подпись для оси х
plt.ylabel('Ось y') #Подпись для оси y
plt.title('Случайный график') #Название
plt.show()

# столбчатая диаграмма
x = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май']
y = [2, 4, 3, 1, 7]

plt.bar(x, y, label='Величина прибыли') #Параметр label позволяет задать название величины для легенды
plt.xlabel('Месяц года')
plt.ylabel('Прибыль, в млн руб.')
plt.title('Пример столбчатой диаграммы')
plt.legend()
plt.show()

# объединяем

plt.bar(x, y, label='Величина прибыли') #Параметр label позволяет задать название величины для легенды
plt.plot(x, y, color='green', marker='o', markersize=7)

plt.xlabel('Месяц года')
plt.ylabel('Прибыль, в млн руб.')
plt.title('Комбинирование графиков')
plt.legend()
plt.show()

# круговая диаграмма
vals = [24, 17, 53, 21, 35]
labels = ["Ford", "Toyota", "BMW", "Audi", "Jaguar"]
plt.pie(vals, labels=labels, autopct='%1.1f%%')
plt.title("Распределение марок автомобилей на дороге")
plt.show()
